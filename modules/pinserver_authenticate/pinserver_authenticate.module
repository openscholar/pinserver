<?php
/**
 * Functions and APIs for logging in a user via pinserver
 *
 * PIN workflow:
 * anonymous user visits user -> user/pin -> pinserver -> PIN has user account -> redirect to $destination
 *                                                     -> PIN has no account
 *                                                            V
 *                                    -----------------------------------------------------------------
 *                                   V                                      V                         V
 *                              User wants to link account      User wants to create site        User wants to cancel
 *                                   V                                     V                           V
 *                             user/login                        site/register                user/pin/cancel
 *                                   V                                    V                            V
 *                              User logs in                     User creates site                Clear pin session
 *                                   V                                    V                            V
 *                              Link PIN with UID               Link PIN with new UID              Redirect to $destination
 *                                   V                                    V                            |
 *                           Redirect to $destination           Redirect to site                       |
 *                                   |                                    |                            |
 *                                   --------------------------------|  Done  |-------------------------
 *
 * Authenticated users cannot access user/pin.
 */

/**
 * Implements hook_menu().
 */
function pinserver_authenticate_menu() {
  $items = array();

  $items['user/pin'] = array(
    'title' => 'Log in via PIN',
    'page callback' => 'pinserver_authenticate_pin_user_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pinserver_authenticate.pages.inc',
  );

  $items['user/pin/create'] = array(
    'title' => 'Link Your Harvard Key to Your OpenScholar Account',
    'page callback' => 'pinserver_authenticate_user_create',
    'access callback' => TRUE,
    'file' => 'pinserver_authenticate.pages.inc',
  );

  $items['user/pin/cancel'] = array(
    'title' => 'Cancel op',
    'page callback' => 'pinserver_authenticate_cancel',
    'access callback' => TRUE,
    'file' => 'pinserver_authenticate.pages.inc'
  );

  return $items;
}

/**
 * Impleemnts hook_menu_alter().
 */
function pinserver_authenticate_menu_alter(&$items) {
  $items['user']['title'] = 'Sign In';
  $items['user']['page callback'] = 'pinserver_authenticate_default_user_login';
  $items['user']['file'] = 'pinserver_authenticate.pages.inc';
  $items['user']['file path'] = drupal_get_path('module', 'pinserver_authenticate');

  $items['user/password']['type'] = MENU_CALLBACK;
}

/**
 * Given a PIN, get the user's UID or false
 */
function pinserver_authenticate_get_uid_from_huid($huid = NULL) {
  if (!$huid){
    $huid = pinserver_get_user_huid();
  }

  if ($huid) {
    $or = db_or()
      ->condition('huid', $huid)
      ->condition('hashID', $huid);
    return db_select('pinserver_users', 'pu')
      ->fields('pu', array('uid'))
      ->condition($or)
      ->execute()
      ->fetchField();
  }

  return FALSE;
}

/**
 * Links a PIN and UID together
 */
function pinserver_authenticate_set_user_huid($uid, $huid) {
  $query = db_merge('pinserver_users');
  if (strlen($huid) > 10) {
    $query->insertFields(array(
      'hashID' => $huid,
      'huid' => null,
      'reg_time' => REQUEST_TIME
    ))->updateFields(array(
      'hashID' => $huid
    ));
  }
  else {
    $query->insertFields(array(
      'huid' => $huid,
      'hashID' => null,
      'reg_time' => REQUEST_TIME
    ))->updateFields(array(
      'huid' => $huid
    ));
  }

  try {
    $query->key(array('uid' => $uid))
      ->execute();
    return true;
  }
  catch (Exception $e) {
    drupal_set_message('Error linking HUID with OpenScholar account', 'error');
    error_log($e->getMessage());
    return false;
  }
}

/**
 * Retreives the raw HUID for a given user account
 */
function pinserver_authenticate_get_user_huid($uid) {
  $q = db_select('pinserver_users', 'pu')
    ->fields('pu', array('huid'))
    ->condition('uid', $uid)
    ->execute();

  return $q->fetchField();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds customizations to user login form
 */
function pinserver_authenticate_form_user_login_alter(&$form, &$form_state) {
  $form['pass']['#description'] .= t(' <br />!request', array('!request' => l('Forgot your password?', 'user/password')));

  if (pinserver_get_user_huid()) {
    // Check to make sure they can't be logged in.
    if ($uid = pinserver_authenticate_get_uid_from_huid(pinserver_get_user_huid())) {
      $pin_user = pinserver_get_user();
      if (isset($pin_user['raw_huid'])) {
        pinserver_authenticate_set_user_huid($uid, $pin_user['raw_huid']);
      }
      $GLOBALS['user'] = user_load($uid);
      user_login_finalize();
      drupal_goto('user');
    }
    elseif (isset($form_state['build_info']['args'][0]) && $form_state['build_info']['args'][0] == 'pin-login') {
      $form['#submit'][] = 'pinserver_authenticate_user_login_submit';
    }
    // Given PIN has no user linked to it
    else {
      unset($_GET['destination']);
      drupal_goto('user/pin/create', array('query' => array('destination' => 'user')));
    }

    return;
  }

  $query = array(
    'destination' => 'user'
  );
  if (isset($_GET['destination'])) {
    $query['destination'] = $_GET['destination'];
  }

  $form['pin'] = array(
    '#prefix' => '<span id="pin-login" class="pin-button">',
    '#markup' => l('Log in using your HarvardKey', 'user/pin', array('query' => $query)),
    '#suffix' => '</span>',
    '#weight' => -1,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'pinserver_authenticate').'/css/pinserver_authenticate.create.css'
      )
    )
  );

  if (!variable_get('login_via_pin_by_default', FALSE)) {
    $form['pin-fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Login with your OpenScholar account'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      'name' => $form['name'],
      'pass' => $form['pass'],
      'actions' => $form['actions']
    );
    unset($form['name'], $form['pass'], $form['actions']);
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Overrides the login theme function for our own.
 */
function pinserver_authenticate_theme_registry_alter(&$reg) {
  if (isset($reg['openscholar_login'])) {
    $reg['openscholar_login']['function'] = 'theme_pinserver_authenticate_openscholar_login';
  }
}

/**
 * Points users to the user/pin page if the by default variable is true
 */
function theme_pinserver_authenticate_openscholar_login($vars) {
  global $user;

  // Do not print the login link if you are logged in.
  if ($user->uid) {
    return "";
  }

  $path = variable_get('login_via_pin_by_default', FALSE)?'user/pin':'user';

  return l($vars['link_text'], $path, array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'attributes' => $vars['attributes'],
    //'query' => drupal_get_destination(),
    'alias' => TRUE,
  ));
}

/**
 * Implements hook_form_{FORM_ID}_alter().
 *
 * Adds setting to make all login attempts go through PIN
 */
function pinserver_authenticate_form_pinserver_config_alter(&$form, &$form_state) {
  $form['pinserver_authenticate'] = array(
    '#type' => 'fieldset',
    '#title' => 'Harvard Pinserver Authentication',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    'login_via_pin_by_default' => array(
      '#type' => 'checkbox',
      '#default_value' => variable_get('login_via_pin_by_default', 0),
      '#title' => t('User must login with PIN'),
      '#description' => t('Checking this will force any users of your site to login using their PIN instead of their OpenScholar account'),
    )
  );
}

/**
 * Change the title of sign on page
 */
function pinserver_authenticate_process_page(&$vars) {
  if (arg(0) == 'user' && (arg(1) === 'login' || (arg(1) == '' && user_is_anonymous()))) {
    $vars['title'] = t('Welcome. Please Log In.');
  }
}

/**
 * Implements hook_vsite_access_denied().
 *
 * Sets the variable on access denied pages so the login link will be correct for private sites
 */
function pinserver_authenticate_vsite_access_denied($vsite) {
  $var = db_select('spaces_overrides', 'so')
        ->fields('so', array('value'))
        ->condition('type', 'og')
        ->condition('id', $vsite->group->nid)
        ->condition('object_type', 'variable')
        ->condition('object_id', 'login_via_pin_by_default')
        ->execute()
        ->fetchField();
  $GLOBALS['conf']['login_via_pin_by_default'] = unserialize($var);
}
